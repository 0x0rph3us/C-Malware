#include <windows.h>
#include <stdio.h>
#include <iostream>
using namespace std;

int main(int argc, char* argv[]){
   
   int PID=atoi(argv[1]);
   char *buffer=argv[2];
   printf("[+] Welcome to Fl0urites DLL injector!\n");
   HANDLE process = OpenProcess(PROCESS_ALL_ACCESS, FALSE, PID);
   if(!process){
      printf("[-] Cannot open process (PID %i).\n")%PID;
      exit(1);
   } else {
      printf("[+] Opened process (PID %i).\n")%PID;
   }
   LPVOID addr = (LPVOID)GetProcAddress(GetModuleHandle("kernel32.dll"), "LoadLibraryA");
   if (addr==NULL) {
      printf("[-] Could not load library from kernel32.dll.\n");
      exit(1);
   } else {
      printf("[+] Loaded library from kernel32.dll.\n");
   }
   LPVOID arg = (LPVOID)VirtualAllocEx(process, NULL, strlen(buffer), MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE);
   if(arg==NULL) {
      printf("[-] The memory could not be allocated inside the chosen process.\n");
      exit(1);
   } else {
      printf("[+] Successfully allocated memory for chosen process.\n");
   }
   int n = WriteProcessMemory(process, arg, buffer, strlen(buffer), NULL);
   if(n == 0) {
      printf("[-] There were no bytes written to the process's address space.\n");
      exit(1);
   }
   HANDLE threadID = CreateRemoteThread(process, NULL, 0, (LPTHREAD_START_ROUTINE)addr, arg, NULL, NULL);
   if(threadID == NULL) {
      printf("[-] The remote thread could not be created.\n");
      exit(1);
   } else {
      printf("[+] The remote thread was successfully created!\n");
      exit(0);
   }
   return 0;
}